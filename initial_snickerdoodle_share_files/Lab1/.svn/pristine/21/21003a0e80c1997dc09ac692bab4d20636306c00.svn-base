#Marc Schwartz
#ESDII Lab1
#Rover Arena

#Import statements
import sys
from PyQt4 import QtGui,QtCore

import math
import csv

class Main_Window(QtGui.QMainWindow):
  Key_W = QtCore.pyqtSignal()  
  Key_A = QtCore.pyqtSignal()  
  Key_S = QtCore.pyqtSignal()  
  Key_D = QtCore.pyqtSignal()  
  
  def __init__(self):
    super(Main_Window, self).__init__()
    self.statusBar().showMessage('Ready')
    self.setWindowIcon(QtGui.QIcon('cool.jpg')) 
    
    exitAction = QtGui.QAction(QtGui.QIcon('exit.png'), '&Exit', self)        
    exitAction.setShortcut('Ctrl+Q')
    exitAction.setStatusTip('Exit application')
    exitAction.triggered.connect(QtGui.qApp.quit)
    
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    fileMenu.addAction(exitAction)    
    
    self.hLayout = QtGui.QHBoxLayout()
    self.leftScorebox = QtGui.QLabel("0")
    self.rightScorebox = QtGui.QLabel("0")  
    self.rightScorebox.setAlignment(QtCore.Qt.AlignRight);  
    self.startButton = QtGui.QPushButton("Start")  

    self.hLayout.addWidget(self.leftScorebox)
    self.hLayout.addWidget(self.startButton)
    self.hLayout.addWidget(self.rightScorebox)       
    
    self.dockFrame = QtGui.QFrame()
    self.dockFrame.setLayout(self.hLayout)    
    
    self.dock = QtGui.QDockWidget(self)
    self.dock.setWidget(self.dockFrame)
    self.addDockWidget(QtCore.Qt.DockWidgetArea(4), self.dock)
    self.dock.setWindowTitle("Controls")

    self.setFocusPolicy(QtCore.Qt.StrongFocus)
    self.leftScore = 0
    self.rightScore = 0    
 
    self.arena = Arena(self)
    self.vLayout = QtGui.QVBoxLayout()    
    self.vLayout.addWidget(self.arena)
    
    self.frame = QtGui.QFrame(self)
    self.frame.setLayout(self.vLayout)

    self.setCentralWidget(self.frame)
    self.setWindowTitle("Main_Window") 
    self.showMaximized()
    self.show()
    
    self.startButton.clicked.connect(lambda: self.arena.startGame()) 
    
  def keyPressEvent(self, event):
    key = event.key()  
    if key == QtCore.Qt.Key_W:     
      self.Key_W.emit()
    elif key == QtCore.Qt.Key_A:
      self.Key_A.emit()
    elif key == QtCore.Qt.Key_S:
      self.Key_S.emit()
    elif key == QtCore.Qt.Key_D:
      self.Key_D.emit()

  def updateScore(self,val):
    if (val == 2):
      self.leftScore = self.leftScore + 1
      self.leftScorebox.setText(str(self.leftScore))
    elif (val == 1):
      self.rightScore = self.rightScore + 1
      self.rightScorebox.setText(str(self.rightScore))

class Rover(QtGui.QGraphicsItem):
  def __init__(self,parent,boardWidth,boardHeight):
    super(Rover, self).__init__()     
    self.colorBody = QtGui.QColor(0,0,255)
    self.colorFront = QtGui.QColor(255,0,0)
    self.roverWidth = 2
    self.roverHeight = 4
    self.boardWidth = boardWidth
    self.boardHeight = boardHeight
    self.parent = parent
    self.angle = 0
    self.xForward = 0
    self.yForward = 0
    self.hwFlag = 0 #0 is no hw software only
    self.manual_keys = 0 #0 is read from file, 1 is use WASD to test
    self.manual_command = 0; #0=none, 1=forward, 2=reverse, 3=left, 4=right
    self.l_dir = 0
    self.left = 0
    self.r_dir = 0
    self.right = 0

    #Encoder setup
    encoderFile = open('encoders.txt','r')
    next(encoderFile)
    self.encoderReader = csv.reader(encoderFile,delimiter='\t')
     
  def boundingRect(self):
    return QtCore.QRectF(-self.roverWidth/2,-self.roverHeight/2,self.roverWidth,self.roverHeight)
      
  def paint(self, painter, option, widget):
    painter.setBrush(self.colorFront)
    painter.drawRect(-self.roverWidth/2,-self.roverHeight/2,self.roverWidth,self.roverHeight)
    #Draws the rovers body over the head color
    painter.setBrush(self.colorBody)
    painter.drawRect(-self.roverWidth/2,-self.roverHeight/2,self.roverWidth,self.roverHeight/4)

  def manual_moveForward(self):
    self.manual_command = 1;
  def manual_moveBackward(self):
    self.manual_command = 2;
  def manual_turnLeft(self):
    self.manual_command = 3;
  def manual_turnRight(self):
    self.manual_command = 4;

  def forward(self,ticks):
    #Calculate movement coordinates
    self.xForward = ticks * math.cos(self.angle * (math.pi/180))
    self.yForward = ticks * math.sin(self.angle * (math.pi/180))
    #Move to new coordinate    
    self.moveBy(self.xForward,self.yForward)

    print('X:',self.xForward,' Y:',self.yForward, ' 0:',self.angle)

  def backward(self,ticks):
    #Calculate movement coordinates
    self.xForward = ticks * math.cos(self.angle * (math.pi/180))
    self.yForward = ticks * math.sin(self.angle * (math.pi/180))
    #Move to new coordinate    
    self.moveBy(-self.xForward,-self.yForward)

    print('X:',-self.xForward,' Y:',-self.yForward, ' 0:',self.angle)

  #Rotate for ticks
  def turn(self,ticks,direct):
    #turn 45 degrees for each tick
    for i in range(0,ticks):
      if(self.angle + (direct * 45) >= 360):
        self.angle = self.angle - 360
      self.rotate(direct * 45)
      self.angle = self.angle + (direct * 45)
      
  def move(self):
    if(self.hwFlag == 0):
      if(self.manual_keys == 0):
        next_command = next(self.encoderReader)
        self.l_dir = int(next_command[0])
        self.left = int(next_command[1])
        self.r_dir = int(next_command[2])
        self.right = int(next_command[3])
        print(' 0:',self.l_dir,' 1:',self.left,' 2:',self.r_dir,' 3:',self.right)
        if((self.l_dir and self.r_dir) == 1):
          print('encodercheck')
          if(self.left == self.right):
            print('forwardcheck')
            self.forward(self.left)
          elif(self.left >= self.right):
            self.turn(self.left - self.right,1)
            self.forward(self.right)
          else:
            self.turn(self.right - self.left,-1)
            self.forward(self.left)
        return 0
      else:
        if(self.manual_command != 0):
          if(self.manual_command == 1):
            self.forward(1);
            self.manual_command = 0
          elif(self.manual_command == 2):
            self.backward(1);
            self.manual_command = 0
          elif(self.manual_command == 3):
            self.turn(1,-1);
            self.manual_command = 0
          elif(self.manual_command == 4):
            self.turn(1,1);
            self.manual_command = 0
          else:
            return 0
        else:
          return 0
        
    else:
      self.forward(0)
      return 0
    return 0

class Arena(QtGui.QGraphicsView):   
  def __init__(self,parent):
    super(Arena, self).__init__()
    self.parent = parent
    self.scene = QtGui.QGraphicsScene(self)
    self.setScene(self.scene)
    
    self.arenaWidth = 50
    self.arenaHeight = 50    
    
    # effectively sets the logical scene coordinates from 0,0 to 1000,1000
    myFrame = self.scene.addRect(0,0,self.arenaWidth,self.arenaHeight) 

    self.rover = Rover(self,self.arenaWidth,self.arenaHeight)
    
    self.scene.addItem(self.rover)
 
    self.timer = QtCore.QBasicTimer()
    self.rover.setPos(25,25)
    self.rover.rotate(90)

    self.parent.Key_W.connect(self.rover.manual_moveForward)
    self.parent.Key_A.connect(self.rover.manual_turnLeft)
    self.parent.Key_S.connect(self.rover.manual_moveBackward)
    self.parent.Key_D.connect(self.rover.manual_turnRight)

  def startGame(self):
    self.status = 0
    self.rover.setPos(25,25)
    self.timer.start(2000, self)   

  def timerEvent(self, event): 
    if (self.status == 0):
      self.status = self.rover.move()
    else:
      self.timer.stop()
      self.parent.updateScore(self.status)
        
  def resizeEvent(self, event):
    super(Arena, self).resizeEvent(event)
    self.fitInView(self.scene.sceneRect(), QtCore.Qt.KeepAspectRatio) 

def main():
  app = QtGui.QApplication(sys.argv)
  app.setFont(QtGui.QFont("Helvetica", 10))  
  main_Window = Main_Window()
  sys.exit(app.exec_())

if __name__ == '__main__':
  main()
